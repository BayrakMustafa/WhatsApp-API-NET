// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Tr.Com.Eimza.LibAxolotl.Protocol
{

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class WhisperProtos
    {

        #region Extension registration
        public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
        {
        }
        #endregion
        #region Static variables
        private static pbd::MessageDescriptor internal__static_WhisperMessage__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.WhisperMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.WhisperMessage.Builder> internal__static_WhisperMessage__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_PreKeyWhisperMessage__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.PreKeyWhisperMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.PreKeyWhisperMessage.Builder> internal__static_PreKeyWhisperMessage__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_KeyExchangeMessage__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.KeyExchangeMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.KeyExchangeMessage.Builder> internal__static_KeyExchangeMessage__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_SenderKeyMessage__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyMessage.Builder> internal__static_SenderKeyMessage__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_SenderKeyDistributionMessage__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyDistributionMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyDistributionMessage.Builder> internal__static_SenderKeyDistributionMessage__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_SenderKeyGroupMessage__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.Builder> internal__static_SenderKeyGroupMessage__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_SenderKeyGroupData__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupData, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupData.Builder> internal__static_SenderKeyGroupData__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_MediaUrl__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.MediaUrl, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.MediaUrl.Builder> internal__static_MediaUrl__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_ImageMessage__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.ImageMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.ImageMessage.Builder> internal__static_ImageMessage__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_Location__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Location, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Location.Builder> internal__static_Location__FieldAccessorTable;
        private static pbd::MessageDescriptor internal__static_DocumentMessage__Descriptor;
        private static pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.DocumentMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.DocumentMessage.Builder> internal__static_DocumentMessage__FieldAccessorTable;
        #endregion
        #region Descriptor
        public static pbd::FileDescriptor Descriptor
        {
            get
            {
                return descriptor;
            }
        }
        private static pbd::FileDescriptor descriptor;

        static WhisperProtos()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChlXaGlzcGVyVGV4dFByb3RvY29sLnByb3RvImIKDldoaXNwZXJNZXNzYWdl",
                  "EhIKCnJhdGNoZXRLZXkYASABKAwSDwoHY291bnRlchgCIAEoDRIXCg9wcmV2",
                  "aW91c0NvdW50ZXIYAyABKA0SEgoKY2lwaGVydGV4dBgEIAEoDCKPAQoUUHJl",
                  "S2V5V2hpc3Blck1lc3NhZ2USFgoOcmVnaXN0cmF0aW9uSWQYBSABKA0SEAoI",
                  "cHJlS2V5SWQYASABKA0SFgoOc2lnbmVkUHJlS2V5SWQYBiABKA0SDwoHYmFz",
                  "ZUtleRgCIAEoDBITCgtpZGVudGl0eUtleRgDIAEoDBIPCgdtZXNzYWdlGAQg",
                  "ASgMInQKEktleUV4Y2hhbmdlTWVzc2FnZRIKCgJpZBgBIAEoDRIPCgdiYXNl",
                  "S2V5GAIgASgMEhIKCnJhdGNoZXRLZXkYAyABKAwSEwoLaWRlbnRpdHlLZXkY",
                  "BCABKAwSGAoQYmFzZUtleVNpZ25hdHVyZRgFIAEoDCJFChBTZW5kZXJLZXlN",
                  "ZXNzYWdlEgoKAmlkGAEgASgNEhEKCWl0ZXJhdGlvbhgCIAEoDRISCgpjaXBo",
                  "ZXJ0ZXh0GAMgASgMImMKHFNlbmRlcktleURpc3RyaWJ1dGlvbk1lc3NhZ2US",
                  "CgoCaWQYASABKA0SEQoJaXRlcmF0aW9uGAIgASgNEhAKCGNoYWluS2V5GAMg",
                  "ASgMEhIKCnNpZ25pbmdLZXkYBCABKAwiOwoVU2VuZGVyS2V5R3JvdXBNZXNz",
                  "YWdlEg8KB2dyb3VwSWQYASABKAwSEQoJc2VuZGVyS2V5GAIgASgMIlAKElNl",
                  "bmRlcktleUdyb3VwRGF0YRIPCgdtZXNzYWdlGAEgASgMEikKCXNlbmRlcktl",
                  "eRgCIAEoCzIWLlNlbmRlcktleUdyb3VwTWVzc2FnZSJwCghNZWRpYVVybBIP",
                  "CgdtZXNzYWdlGAEgASgMEgsKA3VybBgCIAEoDBIQCgh1bmtub3duMRgDIAEo",
                  "DRIQCgh1bmtub3duMhgEIAEoDBITCgtkZXNjcmlwdGlvbhgFIAEoDBINCgV0",
                  "aXRsZRgGIAEoDCK5AQoMSW1hZ2VNZXNzYWdlEgsKA3VybBgBIAEoDBIQCght",
                  "aW1ldHlwZRgCIAEoDBIPCgdjYXB0aW9uGAMgASgMEg4KBnNoYTI1NhgEIAEo",
                  "DBIOCgZsZW5ndGgYBSABKA0SDgoGaGVpZ2h0GAYgASgNEg0KBXdpZHRoGAcg",
                  "ASgNEg4KBnJlZmtleRgIIAEoDBILCgNrZXkYCSABKAwSCgoCaXYYCiABKAwS",
                  "EQoJdGh1bWJuYWlsGAsgASgMInIKCExvY2F0aW9uEhAKCExhdGl0dWRlGAEg",
                  "ASgBEhEKCUxvbmdpdHVkZRgCIAEoARIMCgROYW1lGAMgASgMEhMKC0Rlc2Ny",
                  "aXB0aW9uGAQgASgMEgsKA1VybBgFIAEoDBIRCglUaHVtYm5haWwYBiABKAwi",
                  "pAEKD0RvY3VtZW50TWVzc2FnZRILCgN1cmwYASABKAwSEAoIbWltZXR5cGUY",
                  "AiABKAwSDAoEbmFtZRgDIAEoDBIOCgZsZW5ndGgYBCABKA0SDgoGc2hhMjU2",
                  "GAUgASgMEg8KB3Vua25vd24YBiABKA0SDgoGcmVma2V5GAcgASgMEhAKCGZp",
                "bGVuYW1lGAggASgMEhEKCXRodW1ibmFpbBgJIAEoDA=="));
            pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root)
            {
                descriptor = root;
                internal__static_WhisperMessage__Descriptor = Descriptor.MessageTypes[0];
                internal__static_WhisperMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.WhisperMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.WhisperMessage.Builder>(internal__static_WhisperMessage__Descriptor,
                        new string[] { "RatchetKey", "Counter", "PreviousCounter", "Ciphertext", });
                internal__static_PreKeyWhisperMessage__Descriptor = Descriptor.MessageTypes[1];
                internal__static_PreKeyWhisperMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.PreKeyWhisperMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.PreKeyWhisperMessage.Builder>(internal__static_PreKeyWhisperMessage__Descriptor,
                        new string[] { "RegistrationId", "PreKeyId", "SignedPreKeyId", "BaseKey", "IdentityKey", "Message", });
                internal__static_KeyExchangeMessage__Descriptor = Descriptor.MessageTypes[2];
                internal__static_KeyExchangeMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.KeyExchangeMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.KeyExchangeMessage.Builder>(internal__static_KeyExchangeMessage__Descriptor,
                        new string[] { "Id", "BaseKey", "RatchetKey", "IdentityKey", "BaseKeySignature", });
                internal__static_SenderKeyMessage__Descriptor = Descriptor.MessageTypes[3];
                internal__static_SenderKeyMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyMessage.Builder>(internal__static_SenderKeyMessage__Descriptor,
                        new string[] { "Id", "Iteration", "Ciphertext", });
                internal__static_SenderKeyDistributionMessage__Descriptor = Descriptor.MessageTypes[4];
                internal__static_SenderKeyDistributionMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyDistributionMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyDistributionMessage.Builder>(internal__static_SenderKeyDistributionMessage__Descriptor,
                        new string[] { "Id", "Iteration", "ChainKey", "SigningKey", });
                internal__static_SenderKeyGroupMessage__Descriptor = Descriptor.MessageTypes[5];
                internal__static_SenderKeyGroupMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.Builder>(internal__static_SenderKeyGroupMessage__Descriptor,
                        new string[] { "GroupId", "SenderKey", });
                internal__static_SenderKeyGroupData__Descriptor = Descriptor.MessageTypes[6];
                internal__static_SenderKeyGroupData__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupData, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupData.Builder>(internal__static_SenderKeyGroupData__Descriptor,
                        new string[] { "Message", "SenderKey", });
                internal__static_MediaUrl__Descriptor = Descriptor.MessageTypes[7];
                internal__static_MediaUrl__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.MediaUrl, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.MediaUrl.Builder>(internal__static_MediaUrl__Descriptor,
                        new string[] { "Message", "Url", "Unknown1", "Unknown2", "Description", "Title", });
                internal__static_ImageMessage__Descriptor = Descriptor.MessageTypes[8];
                internal__static_ImageMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.ImageMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.ImageMessage.Builder>(internal__static_ImageMessage__Descriptor,
                        new string[] { "Url", "Mimetype", "Caption", "Sha256", "Length", "Height", "Width", "Refkey", "Key", "Iv", "Thumbnail", });
                internal__static_Location__Descriptor = Descriptor.MessageTypes[9];
                internal__static_Location__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Location, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Location.Builder>(internal__static_Location__Descriptor,
                        new string[] { "Latitude", "Longitude", "Name", "Description", "Url", "Thumbnail", });
                internal__static_DocumentMessage__Descriptor = Descriptor.MessageTypes[10];
                internal__static_DocumentMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.DocumentMessage, global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.DocumentMessage.Builder>(internal__static_DocumentMessage__Descriptor,
                        new string[] { "Url", "Mimetype", "Name", "Length", "Sha256", "Unknown", "Refkey", "Filename", "Thumbnail", });
                return null;
            };
            pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
                new pbd::FileDescriptor[] {
                }, assigner);
        }
        #endregion

        #region Messages
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class WhisperMessage : pb::GeneratedMessage<WhisperMessage, WhisperMessage.Builder>
        {
            private WhisperMessage()
            {
            }
            private static readonly WhisperMessage defaultInstance = new WhisperMessage().MakeReadOnly();
            private static readonly string[] _whisperMessageFieldNames = new string[] { "ciphertext", "counter", "previousCounter", "ratchetKey" };
            private static readonly uint[] _whisperMessageFieldTags = new uint[] { 34, 16, 24, 10 };
            public static WhisperMessage DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override WhisperMessage DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override WhisperMessage ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_WhisperMessage__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<WhisperMessage, WhisperMessage.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_WhisperMessage__FieldAccessorTable;
                }
            }

            public const int RatchetKeyFieldNumber = 1;
            private bool hasRatchetKey;
            private pb::ByteString ratchetKey_ = pb::ByteString.Empty;
            public bool HasRatchetKey
            {
                get
                {
                    return hasRatchetKey;
                }
            }
            public pb::ByteString RatchetKey
            {
                get
                {
                    return ratchetKey_;
                }
            }

            public const int CounterFieldNumber = 2;
            private bool hasCounter;
            private uint counter_;
            public bool HasCounter
            {
                get
                {
                    return hasCounter;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Counter
            {
                get
                {
                    return counter_;
                }
            }

            public const int PreviousCounterFieldNumber = 3;
            private bool hasPreviousCounter;
            private uint previousCounter_;
            public bool HasPreviousCounter
            {
                get
                {
                    return hasPreviousCounter;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint PreviousCounter
            {
                get
                {
                    return previousCounter_;
                }
            }

            public const int CiphertextFieldNumber = 4;
            private bool hasCiphertext;
            private pb::ByteString ciphertext_ = pb::ByteString.Empty;
            public bool HasCiphertext
            {
                get
                {
                    return hasCiphertext;
                }
            }
            public pb::ByteString Ciphertext
            {
                get
                {
                    return ciphertext_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _whisperMessageFieldNames;
                if (hasRatchetKey)
                {
                    output.WriteBytes(1, field_names[3], RatchetKey);
                }
                if (hasCounter)
                {
                    output.WriteUInt32(2, field_names[1], Counter);
                }
                if (hasPreviousCounter)
                {
                    output.WriteUInt32(3, field_names[2], PreviousCounter);
                }
                if (hasCiphertext)
                {
                    output.WriteBytes(4, field_names[0], Ciphertext);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasRatchetKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, RatchetKey);
                }
                if (hasCounter)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Counter);
                }
                if (hasPreviousCounter)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, PreviousCounter);
                }
                if (hasCiphertext)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, Ciphertext);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static WhisperMessage ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static WhisperMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static WhisperMessage ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static WhisperMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static WhisperMessage ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static WhisperMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static WhisperMessage ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static WhisperMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static WhisperMessage ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static WhisperMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private WhisperMessage MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(WhisperMessage prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<WhisperMessage, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(WhisperMessage cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private WhisperMessage result;

                private WhisperMessage PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        WhisperMessage original = result;
                        result = new WhisperMessage();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override WhisperMessage MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.WhisperMessage.Descriptor;
                    }
                }

                public override WhisperMessage DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.WhisperMessage.DefaultInstance;
                    }
                }

                public override WhisperMessage BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is WhisperMessage)
                    {
                        return MergeFrom((WhisperMessage)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(WhisperMessage other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.WhisperMessage.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasRatchetKey)
                    {
                        RatchetKey = other.RatchetKey;
                    }
                    if (other.HasCounter)
                    {
                        Counter = other.Counter;
                    }
                    if (other.HasPreviousCounter)
                    {
                        PreviousCounter = other.PreviousCounter;
                    }
                    if (other.HasCiphertext)
                    {
                        Ciphertext = other.Ciphertext;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_whisperMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _whisperMessageFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 10:
                                {
                                    result.hasRatchetKey = input.ReadBytes(ref result.ratchetKey_);
                                    break;
                                }
                            case 16:
                                {
                                    result.hasCounter = input.ReadUInt32(ref result.counter_);
                                    break;
                                }
                            case 24:
                                {
                                    result.hasPreviousCounter = input.ReadUInt32(ref result.previousCounter_);
                                    break;
                                }
                            case 34:
                                {
                                    result.hasCiphertext = input.ReadBytes(ref result.ciphertext_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasRatchetKey
                {
                    get
                    {
                        return result.hasRatchetKey;
                    }
                }
                public pb::ByteString RatchetKey
                {
                    get
                    {
                        return result.RatchetKey;
                    }
                    set
                    {
                        SetRatchetKey(value);
                    }
                }
                public Builder SetRatchetKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasRatchetKey = true;
                    result.ratchetKey_ = value;
                    return this;
                }
                public Builder ClearRatchetKey()
                {
                    PrepareBuilder();
                    result.hasRatchetKey = false;
                    result.ratchetKey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasCounter
                {
                    get
                    {
                        return result.hasCounter;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Counter
                {
                    get
                    {
                        return result.Counter;
                    }
                    set
                    {
                        SetCounter(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetCounter(uint value)
                {
                    PrepareBuilder();
                    result.hasCounter = true;
                    result.counter_ = value;
                    return this;
                }
                public Builder ClearCounter()
                {
                    PrepareBuilder();
                    result.hasCounter = false;
                    result.counter_ = 0;
                    return this;
                }

                public bool HasPreviousCounter
                {
                    get
                    {
                        return result.hasPreviousCounter;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint PreviousCounter
                {
                    get
                    {
                        return result.PreviousCounter;
                    }
                    set
                    {
                        SetPreviousCounter(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetPreviousCounter(uint value)
                {
                    PrepareBuilder();
                    result.hasPreviousCounter = true;
                    result.previousCounter_ = value;
                    return this;
                }
                public Builder ClearPreviousCounter()
                {
                    PrepareBuilder();
                    result.hasPreviousCounter = false;
                    result.previousCounter_ = 0;
                    return this;
                }

                public bool HasCiphertext
                {
                    get
                    {
                        return result.hasCiphertext;
                    }
                }
                public pb::ByteString Ciphertext
                {
                    get
                    {
                        return result.Ciphertext;
                    }
                    set
                    {
                        SetCiphertext(value);
                    }
                }
                public Builder SetCiphertext(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasCiphertext = true;
                    result.ciphertext_ = value;
                    return this;
                }
                public Builder ClearCiphertext()
                {
                    PrepareBuilder();
                    result.hasCiphertext = false;
                    result.ciphertext_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static WhisperMessage()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class PreKeyWhisperMessage : pb::GeneratedMessage<PreKeyWhisperMessage, PreKeyWhisperMessage.Builder>
        {
            private PreKeyWhisperMessage()
            {
            }
            private static readonly PreKeyWhisperMessage defaultInstance = new PreKeyWhisperMessage().MakeReadOnly();
            private static readonly string[] _preKeyWhisperMessageFieldNames = new string[] { "baseKey", "identityKey", "message", "preKeyId", "registrationId", "signedPreKeyId" };
            private static readonly uint[] _preKeyWhisperMessageFieldTags = new uint[] { 18, 26, 34, 8, 40, 48 };
            public static PreKeyWhisperMessage DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override PreKeyWhisperMessage DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override PreKeyWhisperMessage ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_PreKeyWhisperMessage__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<PreKeyWhisperMessage, PreKeyWhisperMessage.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_PreKeyWhisperMessage__FieldAccessorTable;
                }
            }

            public const int RegistrationIdFieldNumber = 5;
            private bool hasRegistrationId;
            private uint registrationId_;
            public bool HasRegistrationId
            {
                get
                {
                    return hasRegistrationId;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint RegistrationId
            {
                get
                {
                    return registrationId_;
                }
            }

            public const int PreKeyIdFieldNumber = 1;
            private bool hasPreKeyId;
            private uint preKeyId_;
            public bool HasPreKeyId
            {
                get
                {
                    return hasPreKeyId;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint PreKeyId
            {
                get
                {
                    return preKeyId_;
                }
            }

            public const int SignedPreKeyIdFieldNumber = 6;
            private bool hasSignedPreKeyId;
            private uint signedPreKeyId_;
            public bool HasSignedPreKeyId
            {
                get
                {
                    return hasSignedPreKeyId;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint SignedPreKeyId
            {
                get
                {
                    return signedPreKeyId_;
                }
            }

            public const int BaseKeyFieldNumber = 2;
            private bool hasBaseKey;
            private pb::ByteString baseKey_ = pb::ByteString.Empty;
            public bool HasBaseKey
            {
                get
                {
                    return hasBaseKey;
                }
            }
            public pb::ByteString BaseKey
            {
                get
                {
                    return baseKey_;
                }
            }

            public const int IdentityKeyFieldNumber = 3;
            private bool hasIdentityKey;
            private pb::ByteString identityKey_ = pb::ByteString.Empty;
            public bool HasIdentityKey
            {
                get
                {
                    return hasIdentityKey;
                }
            }
            public pb::ByteString IdentityKey
            {
                get
                {
                    return identityKey_;
                }
            }

            public const int MessageFieldNumber = 4;
            private bool hasMessage;
            private pb::ByteString message_ = pb::ByteString.Empty;
            public bool HasMessage
            {
                get
                {
                    return hasMessage;
                }
            }
            public pb::ByteString Message
            {
                get
                {
                    return message_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _preKeyWhisperMessageFieldNames;
                if (hasPreKeyId)
                {
                    output.WriteUInt32(1, field_names[3], PreKeyId);
                }
                if (hasBaseKey)
                {
                    output.WriteBytes(2, field_names[0], BaseKey);
                }
                if (hasIdentityKey)
                {
                    output.WriteBytes(3, field_names[1], IdentityKey);
                }
                if (hasMessage)
                {
                    output.WriteBytes(4, field_names[2], Message);
                }
                if (hasRegistrationId)
                {
                    output.WriteUInt32(5, field_names[4], RegistrationId);
                }
                if (hasSignedPreKeyId)
                {
                    output.WriteUInt32(6, field_names[5], SignedPreKeyId);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasRegistrationId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, RegistrationId);
                }
                if (hasPreKeyId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, PreKeyId);
                }
                if (hasSignedPreKeyId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, SignedPreKeyId);
                }
                if (hasBaseKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, BaseKey);
                }
                if (hasIdentityKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, IdentityKey);
                }
                if (hasMessage)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, Message);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static PreKeyWhisperMessage ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static PreKeyWhisperMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private PreKeyWhisperMessage MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(PreKeyWhisperMessage prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<PreKeyWhisperMessage, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(PreKeyWhisperMessage cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private PreKeyWhisperMessage result;

                private PreKeyWhisperMessage PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        PreKeyWhisperMessage original = result;
                        result = new PreKeyWhisperMessage();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override PreKeyWhisperMessage MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.PreKeyWhisperMessage.Descriptor;
                    }
                }

                public override PreKeyWhisperMessage DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.PreKeyWhisperMessage.DefaultInstance;
                    }
                }

                public override PreKeyWhisperMessage BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is PreKeyWhisperMessage)
                    {
                        return MergeFrom((PreKeyWhisperMessage)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(PreKeyWhisperMessage other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.PreKeyWhisperMessage.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasRegistrationId)
                    {
                        RegistrationId = other.RegistrationId;
                    }
                    if (other.HasPreKeyId)
                    {
                        PreKeyId = other.PreKeyId;
                    }
                    if (other.HasSignedPreKeyId)
                    {
                        SignedPreKeyId = other.SignedPreKeyId;
                    }
                    if (other.HasBaseKey)
                    {
                        BaseKey = other.BaseKey;
                    }
                    if (other.HasIdentityKey)
                    {
                        IdentityKey = other.IdentityKey;
                    }
                    if (other.HasMessage)
                    {
                        Message = other.Message;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_preKeyWhisperMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _preKeyWhisperMessageFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 8:
                                {
                                    result.hasPreKeyId = input.ReadUInt32(ref result.preKeyId_);
                                    break;
                                }
                            case 18:
                                {
                                    result.hasBaseKey = input.ReadBytes(ref result.baseKey_);
                                    break;
                                }
                            case 26:
                                {
                                    result.hasIdentityKey = input.ReadBytes(ref result.identityKey_);
                                    break;
                                }
                            case 34:
                                {
                                    result.hasMessage = input.ReadBytes(ref result.message_);
                                    break;
                                }
                            case 40:
                                {
                                    result.hasRegistrationId = input.ReadUInt32(ref result.registrationId_);
                                    break;
                                }
                            case 48:
                                {
                                    result.hasSignedPreKeyId = input.ReadUInt32(ref result.signedPreKeyId_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasRegistrationId
                {
                    get
                    {
                        return result.hasRegistrationId;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint RegistrationId
                {
                    get
                    {
                        return result.RegistrationId;
                    }
                    set
                    {
                        SetRegistrationId(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetRegistrationId(uint value)
                {
                    PrepareBuilder();
                    result.hasRegistrationId = true;
                    result.registrationId_ = value;
                    return this;
                }
                public Builder ClearRegistrationId()
                {
                    PrepareBuilder();
                    result.hasRegistrationId = false;
                    result.registrationId_ = 0;
                    return this;
                }

                public bool HasPreKeyId
                {
                    get
                    {
                        return result.hasPreKeyId;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint PreKeyId
                {
                    get
                    {
                        return result.PreKeyId;
                    }
                    set
                    {
                        SetPreKeyId(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetPreKeyId(uint value)
                {
                    PrepareBuilder();
                    result.hasPreKeyId = true;
                    result.preKeyId_ = value;
                    return this;
                }
                public Builder ClearPreKeyId()
                {
                    PrepareBuilder();
                    result.hasPreKeyId = false;
                    result.preKeyId_ = 0;
                    return this;
                }

                public bool HasSignedPreKeyId
                {
                    get
                    {
                        return result.hasSignedPreKeyId;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint SignedPreKeyId
                {
                    get
                    {
                        return result.SignedPreKeyId;
                    }
                    set
                    {
                        SetSignedPreKeyId(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetSignedPreKeyId(uint value)
                {
                    PrepareBuilder();
                    result.hasSignedPreKeyId = true;
                    result.signedPreKeyId_ = value;
                    return this;
                }
                public Builder ClearSignedPreKeyId()
                {
                    PrepareBuilder();
                    result.hasSignedPreKeyId = false;
                    result.signedPreKeyId_ = 0;
                    return this;
                }

                public bool HasBaseKey
                {
                    get
                    {
                        return result.hasBaseKey;
                    }
                }
                public pb::ByteString BaseKey
                {
                    get
                    {
                        return result.BaseKey;
                    }
                    set
                    {
                        SetBaseKey(value);
                    }
                }
                public Builder SetBaseKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasBaseKey = true;
                    result.baseKey_ = value;
                    return this;
                }
                public Builder ClearBaseKey()
                {
                    PrepareBuilder();
                    result.hasBaseKey = false;
                    result.baseKey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasIdentityKey
                {
                    get
                    {
                        return result.hasIdentityKey;
                    }
                }
                public pb::ByteString IdentityKey
                {
                    get
                    {
                        return result.IdentityKey;
                    }
                    set
                    {
                        SetIdentityKey(value);
                    }
                }
                public Builder SetIdentityKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasIdentityKey = true;
                    result.identityKey_ = value;
                    return this;
                }
                public Builder ClearIdentityKey()
                {
                    PrepareBuilder();
                    result.hasIdentityKey = false;
                    result.identityKey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasMessage
                {
                    get
                    {
                        return result.hasMessage;
                    }
                }
                public pb::ByteString Message
                {
                    get
                    {
                        return result.Message;
                    }
                    set
                    {
                        SetMessage(value);
                    }
                }
                public Builder SetMessage(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasMessage = true;
                    result.message_ = value;
                    return this;
                }
                public Builder ClearMessage()
                {
                    PrepareBuilder();
                    result.hasMessage = false;
                    result.message_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static PreKeyWhisperMessage()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class KeyExchangeMessage : pb::GeneratedMessage<KeyExchangeMessage, KeyExchangeMessage.Builder>
        {
            private KeyExchangeMessage()
            {
            }
            private static readonly KeyExchangeMessage defaultInstance = new KeyExchangeMessage().MakeReadOnly();
            private static readonly string[] _keyExchangeMessageFieldNames = new string[] { "baseKey", "baseKeySignature", "id", "identityKey", "ratchetKey" };
            private static readonly uint[] _keyExchangeMessageFieldTags = new uint[] { 18, 42, 8, 34, 26 };
            public static KeyExchangeMessage DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override KeyExchangeMessage DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override KeyExchangeMessage ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_KeyExchangeMessage__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<KeyExchangeMessage, KeyExchangeMessage.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_KeyExchangeMessage__FieldAccessorTable;
                }
            }

            public const int IdFieldNumber = 1;
            private bool hasId;
            private uint id_;
            public bool HasId
            {
                get
                {
                    return hasId;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Id
            {
                get
                {
                    return id_;
                }
            }

            public const int BaseKeyFieldNumber = 2;
            private bool hasBaseKey;
            private pb::ByteString baseKey_ = pb::ByteString.Empty;
            public bool HasBaseKey
            {
                get
                {
                    return hasBaseKey;
                }
            }
            public pb::ByteString BaseKey
            {
                get
                {
                    return baseKey_;
                }
            }

            public const int RatchetKeyFieldNumber = 3;
            private bool hasRatchetKey;
            private pb::ByteString ratchetKey_ = pb::ByteString.Empty;
            public bool HasRatchetKey
            {
                get
                {
                    return hasRatchetKey;
                }
            }
            public pb::ByteString RatchetKey
            {
                get
                {
                    return ratchetKey_;
                }
            }

            public const int IdentityKeyFieldNumber = 4;
            private bool hasIdentityKey;
            private pb::ByteString identityKey_ = pb::ByteString.Empty;
            public bool HasIdentityKey
            {
                get
                {
                    return hasIdentityKey;
                }
            }
            public pb::ByteString IdentityKey
            {
                get
                {
                    return identityKey_;
                }
            }

            public const int BaseKeySignatureFieldNumber = 5;
            private bool hasBaseKeySignature;
            private pb::ByteString baseKeySignature_ = pb::ByteString.Empty;
            public bool HasBaseKeySignature
            {
                get
                {
                    return hasBaseKeySignature;
                }
            }
            public pb::ByteString BaseKeySignature
            {
                get
                {
                    return baseKeySignature_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _keyExchangeMessageFieldNames;
                if (hasId)
                {
                    output.WriteUInt32(1, field_names[2], Id);
                }
                if (hasBaseKey)
                {
                    output.WriteBytes(2, field_names[0], BaseKey);
                }
                if (hasRatchetKey)
                {
                    output.WriteBytes(3, field_names[4], RatchetKey);
                }
                if (hasIdentityKey)
                {
                    output.WriteBytes(4, field_names[3], IdentityKey);
                }
                if (hasBaseKeySignature)
                {
                    output.WriteBytes(5, field_names[1], BaseKeySignature);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
                }
                if (hasBaseKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, BaseKey);
                }
                if (hasRatchetKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, RatchetKey);
                }
                if (hasIdentityKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, IdentityKey);
                }
                if (hasBaseKeySignature)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(5, BaseKeySignature);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static KeyExchangeMessage ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static KeyExchangeMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static KeyExchangeMessage ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static KeyExchangeMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static KeyExchangeMessage ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static KeyExchangeMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static KeyExchangeMessage ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static KeyExchangeMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static KeyExchangeMessage ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static KeyExchangeMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private KeyExchangeMessage MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(KeyExchangeMessage prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<KeyExchangeMessage, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(KeyExchangeMessage cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private KeyExchangeMessage result;

                private KeyExchangeMessage PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        KeyExchangeMessage original = result;
                        result = new KeyExchangeMessage();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override KeyExchangeMessage MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.KeyExchangeMessage.Descriptor;
                    }
                }

                public override KeyExchangeMessage DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.KeyExchangeMessage.DefaultInstance;
                    }
                }

                public override KeyExchangeMessage BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is KeyExchangeMessage)
                    {
                        return MergeFrom((KeyExchangeMessage)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(KeyExchangeMessage other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.KeyExchangeMessage.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasId)
                    {
                        Id = other.Id;
                    }
                    if (other.HasBaseKey)
                    {
                        BaseKey = other.BaseKey;
                    }
                    if (other.HasRatchetKey)
                    {
                        RatchetKey = other.RatchetKey;
                    }
                    if (other.HasIdentityKey)
                    {
                        IdentityKey = other.IdentityKey;
                    }
                    if (other.HasBaseKeySignature)
                    {
                        BaseKeySignature = other.BaseKeySignature;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_keyExchangeMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _keyExchangeMessageFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 8:
                                {
                                    result.hasId = input.ReadUInt32(ref result.id_);
                                    break;
                                }
                            case 18:
                                {
                                    result.hasBaseKey = input.ReadBytes(ref result.baseKey_);
                                    break;
                                }
                            case 26:
                                {
                                    result.hasRatchetKey = input.ReadBytes(ref result.ratchetKey_);
                                    break;
                                }
                            case 34:
                                {
                                    result.hasIdentityKey = input.ReadBytes(ref result.identityKey_);
                                    break;
                                }
                            case 42:
                                {
                                    result.hasBaseKeySignature = input.ReadBytes(ref result.baseKeySignature_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasId
                {
                    get
                    {
                        return result.hasId;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Id
                {
                    get
                    {
                        return result.Id;
                    }
                    set
                    {
                        SetId(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetId(uint value)
                {
                    PrepareBuilder();
                    result.hasId = true;
                    result.id_ = value;
                    return this;
                }
                public Builder ClearId()
                {
                    PrepareBuilder();
                    result.hasId = false;
                    result.id_ = 0;
                    return this;
                }

                public bool HasBaseKey
                {
                    get
                    {
                        return result.hasBaseKey;
                    }
                }
                public pb::ByteString BaseKey
                {
                    get
                    {
                        return result.BaseKey;
                    }
                    set
                    {
                        SetBaseKey(value);
                    }
                }
                public Builder SetBaseKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasBaseKey = true;
                    result.baseKey_ = value;
                    return this;
                }
                public Builder ClearBaseKey()
                {
                    PrepareBuilder();
                    result.hasBaseKey = false;
                    result.baseKey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasRatchetKey
                {
                    get
                    {
                        return result.hasRatchetKey;
                    }
                }
                public pb::ByteString RatchetKey
                {
                    get
                    {
                        return result.RatchetKey;
                    }
                    set
                    {
                        SetRatchetKey(value);
                    }
                }
                public Builder SetRatchetKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasRatchetKey = true;
                    result.ratchetKey_ = value;
                    return this;
                }
                public Builder ClearRatchetKey()
                {
                    PrepareBuilder();
                    result.hasRatchetKey = false;
                    result.ratchetKey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasIdentityKey
                {
                    get
                    {
                        return result.hasIdentityKey;
                    }
                }
                public pb::ByteString IdentityKey
                {
                    get
                    {
                        return result.IdentityKey;
                    }
                    set
                    {
                        SetIdentityKey(value);
                    }
                }
                public Builder SetIdentityKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasIdentityKey = true;
                    result.identityKey_ = value;
                    return this;
                }
                public Builder ClearIdentityKey()
                {
                    PrepareBuilder();
                    result.hasIdentityKey = false;
                    result.identityKey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasBaseKeySignature
                {
                    get
                    {
                        return result.hasBaseKeySignature;
                    }
                }
                public pb::ByteString BaseKeySignature
                {
                    get
                    {
                        return result.BaseKeySignature;
                    }
                    set
                    {
                        SetBaseKeySignature(value);
                    }
                }
                public Builder SetBaseKeySignature(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasBaseKeySignature = true;
                    result.baseKeySignature_ = value;
                    return this;
                }
                public Builder ClearBaseKeySignature()
                {
                    PrepareBuilder();
                    result.hasBaseKeySignature = false;
                    result.baseKeySignature_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static KeyExchangeMessage()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class SenderKeyMessage : pb::GeneratedMessage<SenderKeyMessage, SenderKeyMessage.Builder>
        {
            private SenderKeyMessage()
            {
            }
            private static readonly SenderKeyMessage defaultInstance = new SenderKeyMessage().MakeReadOnly();
            private static readonly string[] _senderKeyMessageFieldNames = new string[] { "ciphertext", "id", "iteration" };
            private static readonly uint[] _senderKeyMessageFieldTags = new uint[] { 26, 8, 16 };
            public static SenderKeyMessage DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override SenderKeyMessage DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override SenderKeyMessage ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_SenderKeyMessage__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<SenderKeyMessage, SenderKeyMessage.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_SenderKeyMessage__FieldAccessorTable;
                }
            }

            public const int IdFieldNumber = 1;
            private bool hasId;
            private uint id_;
            public bool HasId
            {
                get
                {
                    return hasId;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Id
            {
                get
                {
                    return id_;
                }
            }

            public const int IterationFieldNumber = 2;
            private bool hasIteration;
            private uint iteration_;
            public bool HasIteration
            {
                get
                {
                    return hasIteration;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Iteration
            {
                get
                {
                    return iteration_;
                }
            }

            public const int CiphertextFieldNumber = 3;
            private bool hasCiphertext;
            private pb::ByteString ciphertext_ = pb::ByteString.Empty;
            public bool HasCiphertext
            {
                get
                {
                    return hasCiphertext;
                }
            }
            public pb::ByteString Ciphertext
            {
                get
                {
                    return ciphertext_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _senderKeyMessageFieldNames;
                if (hasId)
                {
                    output.WriteUInt32(1, field_names[1], Id);
                }
                if (hasIteration)
                {
                    output.WriteUInt32(2, field_names[2], Iteration);
                }
                if (hasCiphertext)
                {
                    output.WriteBytes(3, field_names[0], Ciphertext);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
                }
                if (hasIteration)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Iteration);
                }
                if (hasCiphertext)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, Ciphertext);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static SenderKeyMessage ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SenderKeyMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyMessage ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SenderKeyMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyMessage ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SenderKeyMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyMessage ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static SenderKeyMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static SenderKeyMessage ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SenderKeyMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private SenderKeyMessage MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(SenderKeyMessage prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<SenderKeyMessage, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(SenderKeyMessage cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private SenderKeyMessage result;

                private SenderKeyMessage PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        SenderKeyMessage original = result;
                        result = new SenderKeyMessage();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override SenderKeyMessage MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyMessage.Descriptor;
                    }
                }

                public override SenderKeyMessage DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyMessage.DefaultInstance;
                    }
                }

                public override SenderKeyMessage BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is SenderKeyMessage)
                    {
                        return MergeFrom((SenderKeyMessage)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(SenderKeyMessage other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyMessage.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasId)
                    {
                        Id = other.Id;
                    }
                    if (other.HasIteration)
                    {
                        Iteration = other.Iteration;
                    }
                    if (other.HasCiphertext)
                    {
                        Ciphertext = other.Ciphertext;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_senderKeyMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _senderKeyMessageFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 8:
                                {
                                    result.hasId = input.ReadUInt32(ref result.id_);
                                    break;
                                }
                            case 16:
                                {
                                    result.hasIteration = input.ReadUInt32(ref result.iteration_);
                                    break;
                                }
                            case 26:
                                {
                                    result.hasCiphertext = input.ReadBytes(ref result.ciphertext_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasId
                {
                    get
                    {
                        return result.hasId;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Id
                {
                    get
                    {
                        return result.Id;
                    }
                    set
                    {
                        SetId(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetId(uint value)
                {
                    PrepareBuilder();
                    result.hasId = true;
                    result.id_ = value;
                    return this;
                }
                public Builder ClearId()
                {
                    PrepareBuilder();
                    result.hasId = false;
                    result.id_ = 0;
                    return this;
                }

                public bool HasIteration
                {
                    get
                    {
                        return result.hasIteration;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Iteration
                {
                    get
                    {
                        return result.Iteration;
                    }
                    set
                    {
                        SetIteration(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetIteration(uint value)
                {
                    PrepareBuilder();
                    result.hasIteration = true;
                    result.iteration_ = value;
                    return this;
                }
                public Builder ClearIteration()
                {
                    PrepareBuilder();
                    result.hasIteration = false;
                    result.iteration_ = 0;
                    return this;
                }

                public bool HasCiphertext
                {
                    get
                    {
                        return result.hasCiphertext;
                    }
                }
                public pb::ByteString Ciphertext
                {
                    get
                    {
                        return result.Ciphertext;
                    }
                    set
                    {
                        SetCiphertext(value);
                    }
                }
                public Builder SetCiphertext(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasCiphertext = true;
                    result.ciphertext_ = value;
                    return this;
                }
                public Builder ClearCiphertext()
                {
                    PrepareBuilder();
                    result.hasCiphertext = false;
                    result.ciphertext_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static SenderKeyMessage()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class SenderKeyDistributionMessage : pb::GeneratedMessage<SenderKeyDistributionMessage, SenderKeyDistributionMessage.Builder>
        {
            private SenderKeyDistributionMessage()
            {
            }
            private static readonly SenderKeyDistributionMessage defaultInstance = new SenderKeyDistributionMessage().MakeReadOnly();
            private static readonly string[] _senderKeyDistributionMessageFieldNames = new string[] { "chainKey", "id", "iteration", "signingKey" };
            private static readonly uint[] _senderKeyDistributionMessageFieldTags = new uint[] { 26, 8, 16, 34 };
            public static SenderKeyDistributionMessage DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override SenderKeyDistributionMessage DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override SenderKeyDistributionMessage ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_SenderKeyDistributionMessage__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<SenderKeyDistributionMessage, SenderKeyDistributionMessage.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_SenderKeyDistributionMessage__FieldAccessorTable;
                }
            }

            public const int IdFieldNumber = 1;
            private bool hasId;
            private uint id_;
            public bool HasId
            {
                get
                {
                    return hasId;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Id
            {
                get
                {
                    return id_;
                }
            }

            public const int IterationFieldNumber = 2;
            private bool hasIteration;
            private uint iteration_;
            public bool HasIteration
            {
                get
                {
                    return hasIteration;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Iteration
            {
                get
                {
                    return iteration_;
                }
            }

            public const int ChainKeyFieldNumber = 3;
            private bool hasChainKey;
            private pb::ByteString chainKey_ = pb::ByteString.Empty;
            public bool HasChainKey
            {
                get
                {
                    return hasChainKey;
                }
            }
            public pb::ByteString ChainKey
            {
                get
                {
                    return chainKey_;
                }
            }

            public const int SigningKeyFieldNumber = 4;
            private bool hasSigningKey;
            private pb::ByteString signingKey_ = pb::ByteString.Empty;
            public bool HasSigningKey
            {
                get
                {
                    return hasSigningKey;
                }
            }
            public pb::ByteString SigningKey
            {
                get
                {
                    return signingKey_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _senderKeyDistributionMessageFieldNames;
                if (hasId)
                {
                    output.WriteUInt32(1, field_names[1], Id);
                }
                if (hasIteration)
                {
                    output.WriteUInt32(2, field_names[2], Iteration);
                }
                if (hasChainKey)
                {
                    output.WriteBytes(3, field_names[0], ChainKey);
                }
                if (hasSigningKey)
                {
                    output.WriteBytes(4, field_names[3], SigningKey);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
                }
                if (hasIteration)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Iteration);
                }
                if (hasChainKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, ChainKey);
                }
                if (hasSigningKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, SigningKey);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static SenderKeyDistributionMessage ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SenderKeyDistributionMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private SenderKeyDistributionMessage MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(SenderKeyDistributionMessage prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<SenderKeyDistributionMessage, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(SenderKeyDistributionMessage cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private SenderKeyDistributionMessage result;

                private SenderKeyDistributionMessage PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        SenderKeyDistributionMessage original = result;
                        result = new SenderKeyDistributionMessage();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override SenderKeyDistributionMessage MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyDistributionMessage.Descriptor;
                    }
                }

                public override SenderKeyDistributionMessage DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyDistributionMessage.DefaultInstance;
                    }
                }

                public override SenderKeyDistributionMessage BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is SenderKeyDistributionMessage)
                    {
                        return MergeFrom((SenderKeyDistributionMessage)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(SenderKeyDistributionMessage other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyDistributionMessage.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasId)
                    {
                        Id = other.Id;
                    }
                    if (other.HasIteration)
                    {
                        Iteration = other.Iteration;
                    }
                    if (other.HasChainKey)
                    {
                        ChainKey = other.ChainKey;
                    }
                    if (other.HasSigningKey)
                    {
                        SigningKey = other.SigningKey;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_senderKeyDistributionMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _senderKeyDistributionMessageFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 8:
                                {
                                    result.hasId = input.ReadUInt32(ref result.id_);
                                    break;
                                }
                            case 16:
                                {
                                    result.hasIteration = input.ReadUInt32(ref result.iteration_);
                                    break;
                                }
                            case 26:
                                {
                                    result.hasChainKey = input.ReadBytes(ref result.chainKey_);
                                    break;
                                }
                            case 34:
                                {
                                    result.hasSigningKey = input.ReadBytes(ref result.signingKey_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasId
                {
                    get
                    {
                        return result.hasId;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Id
                {
                    get
                    {
                        return result.Id;
                    }
                    set
                    {
                        SetId(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetId(uint value)
                {
                    PrepareBuilder();
                    result.hasId = true;
                    result.id_ = value;
                    return this;
                }
                public Builder ClearId()
                {
                    PrepareBuilder();
                    result.hasId = false;
                    result.id_ = 0;
                    return this;
                }

                public bool HasIteration
                {
                    get
                    {
                        return result.hasIteration;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Iteration
                {
                    get
                    {
                        return result.Iteration;
                    }
                    set
                    {
                        SetIteration(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetIteration(uint value)
                {
                    PrepareBuilder();
                    result.hasIteration = true;
                    result.iteration_ = value;
                    return this;
                }
                public Builder ClearIteration()
                {
                    PrepareBuilder();
                    result.hasIteration = false;
                    result.iteration_ = 0;
                    return this;
                }

                public bool HasChainKey
                {
                    get
                    {
                        return result.hasChainKey;
                    }
                }
                public pb::ByteString ChainKey
                {
                    get
                    {
                        return result.ChainKey;
                    }
                    set
                    {
                        SetChainKey(value);
                    }
                }
                public Builder SetChainKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasChainKey = true;
                    result.chainKey_ = value;
                    return this;
                }
                public Builder ClearChainKey()
                {
                    PrepareBuilder();
                    result.hasChainKey = false;
                    result.chainKey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasSigningKey
                {
                    get
                    {
                        return result.hasSigningKey;
                    }
                }
                public pb::ByteString SigningKey
                {
                    get
                    {
                        return result.SigningKey;
                    }
                    set
                    {
                        SetSigningKey(value);
                    }
                }
                public Builder SetSigningKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasSigningKey = true;
                    result.signingKey_ = value;
                    return this;
                }
                public Builder ClearSigningKey()
                {
                    PrepareBuilder();
                    result.hasSigningKey = false;
                    result.signingKey_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static SenderKeyDistributionMessage()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class SenderKeyGroupMessage : pb::GeneratedMessage<SenderKeyGroupMessage, SenderKeyGroupMessage.Builder>
        {
            private SenderKeyGroupMessage()
            {
            }
            private static readonly SenderKeyGroupMessage defaultInstance = new SenderKeyGroupMessage().MakeReadOnly();
            private static readonly string[] _senderKeyGroupMessageFieldNames = new string[] { "groupId", "senderKey" };
            private static readonly uint[] _senderKeyGroupMessageFieldTags = new uint[] { 10, 18 };
            public static SenderKeyGroupMessage DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override SenderKeyGroupMessage DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override SenderKeyGroupMessage ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_SenderKeyGroupMessage__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<SenderKeyGroupMessage, SenderKeyGroupMessage.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_SenderKeyGroupMessage__FieldAccessorTable;
                }
            }

            public const int GroupIdFieldNumber = 1;
            private bool hasGroupId;
            private pb::ByteString groupId_ = pb::ByteString.Empty;
            public bool HasGroupId
            {
                get
                {
                    return hasGroupId;
                }
            }
            public pb::ByteString GroupId
            {
                get
                {
                    return groupId_;
                }
            }

            public const int SenderKeyFieldNumber = 2;
            private bool hasSenderKey;
            private pb::ByteString senderKey_ = pb::ByteString.Empty;
            public bool HasSenderKey
            {
                get
                {
                    return hasSenderKey;
                }
            }
            public pb::ByteString SenderKey
            {
                get
                {
                    return senderKey_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _senderKeyGroupMessageFieldNames;
                if (hasGroupId)
                {
                    output.WriteBytes(1, field_names[0], GroupId);
                }
                if (hasSenderKey)
                {
                    output.WriteBytes(2, field_names[1], SenderKey);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasGroupId)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, GroupId);
                }
                if (hasSenderKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, SenderKey);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static SenderKeyGroupMessage ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SenderKeyGroupMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private SenderKeyGroupMessage MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(SenderKeyGroupMessage prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<SenderKeyGroupMessage, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(SenderKeyGroupMessage cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private SenderKeyGroupMessage result;

                private SenderKeyGroupMessage PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        SenderKeyGroupMessage original = result;
                        result = new SenderKeyGroupMessage();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override SenderKeyGroupMessage MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.Descriptor;
                    }
                }

                public override SenderKeyGroupMessage DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.DefaultInstance;
                    }
                }

                public override SenderKeyGroupMessage BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is SenderKeyGroupMessage)
                    {
                        return MergeFrom((SenderKeyGroupMessage)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(SenderKeyGroupMessage other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasGroupId)
                    {
                        GroupId = other.GroupId;
                    }
                    if (other.HasSenderKey)
                    {
                        SenderKey = other.SenderKey;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_senderKeyGroupMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _senderKeyGroupMessageFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 10:
                                {
                                    result.hasGroupId = input.ReadBytes(ref result.groupId_);
                                    break;
                                }
                            case 18:
                                {
                                    result.hasSenderKey = input.ReadBytes(ref result.senderKey_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasGroupId
                {
                    get
                    {
                        return result.hasGroupId;
                    }
                }
                public pb::ByteString GroupId
                {
                    get
                    {
                        return result.GroupId;
                    }
                    set
                    {
                        SetGroupId(value);
                    }
                }
                public Builder SetGroupId(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasGroupId = true;
                    result.groupId_ = value;
                    return this;
                }
                public Builder ClearGroupId()
                {
                    PrepareBuilder();
                    result.hasGroupId = false;
                    result.groupId_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasSenderKey
                {
                    get
                    {
                        return result.hasSenderKey;
                    }
                }
                public pb::ByteString SenderKey
                {
                    get
                    {
                        return result.SenderKey;
                    }
                    set
                    {
                        SetSenderKey(value);
                    }
                }
                public Builder SetSenderKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasSenderKey = true;
                    result.senderKey_ = value;
                    return this;
                }
                public Builder ClearSenderKey()
                {
                    PrepareBuilder();
                    result.hasSenderKey = false;
                    result.senderKey_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static SenderKeyGroupMessage()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class SenderKeyGroupData : pb::GeneratedMessage<SenderKeyGroupData, SenderKeyGroupData.Builder>
        {
            private SenderKeyGroupData()
            {
            }
            private static readonly SenderKeyGroupData defaultInstance = new SenderKeyGroupData().MakeReadOnly();
            private static readonly string[] _senderKeyGroupDataFieldNames = new string[] { "message", "senderKey" };
            private static readonly uint[] _senderKeyGroupDataFieldTags = new uint[] { 10, 18 };
            public static SenderKeyGroupData DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override SenderKeyGroupData DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override SenderKeyGroupData ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_SenderKeyGroupData__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<SenderKeyGroupData, SenderKeyGroupData.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_SenderKeyGroupData__FieldAccessorTable;
                }
            }

            public const int MessageFieldNumber = 1;
            private bool hasMessage;
            private pb::ByteString message_ = pb::ByteString.Empty;
            public bool HasMessage
            {
                get
                {
                    return hasMessage;
                }
            }
            public pb::ByteString Message
            {
                get
                {
                    return message_;
                }
            }

            public const int SenderKeyFieldNumber = 2;
            private bool hasSenderKey;
            private global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage senderKey_;
            public bool HasSenderKey
            {
                get
                {
                    return hasSenderKey;
                }
            }
            public global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage SenderKey
            {
                get
                {
                    return senderKey_ ?? global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.DefaultInstance;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _senderKeyGroupDataFieldNames;
                if (hasMessage)
                {
                    output.WriteBytes(1, field_names[0], Message);
                }
                if (hasSenderKey)
                {
                    output.WriteMessage(2, field_names[1], SenderKey);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasMessage)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Message);
                }
                if (hasSenderKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, SenderKey);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static SenderKeyGroupData ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SenderKeyGroupData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyGroupData ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SenderKeyGroupData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyGroupData ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SenderKeyGroupData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static SenderKeyGroupData ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static SenderKeyGroupData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static SenderKeyGroupData ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SenderKeyGroupData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private SenderKeyGroupData MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(SenderKeyGroupData prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<SenderKeyGroupData, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(SenderKeyGroupData cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private SenderKeyGroupData result;

                private SenderKeyGroupData PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        SenderKeyGroupData original = result;
                        result = new SenderKeyGroupData();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override SenderKeyGroupData MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupData.Descriptor;
                    }
                }

                public override SenderKeyGroupData DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupData.DefaultInstance;
                    }
                }

                public override SenderKeyGroupData BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is SenderKeyGroupData)
                    {
                        return MergeFrom((SenderKeyGroupData)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(SenderKeyGroupData other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupData.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasMessage)
                    {
                        Message = other.Message;
                    }
                    if (other.HasSenderKey)
                    {
                        MergeSenderKey(other.SenderKey);
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_senderKeyGroupDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _senderKeyGroupDataFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 10:
                                {
                                    result.hasMessage = input.ReadBytes(ref result.message_);
                                    break;
                                }
                            case 18:
                                {
                                    global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.Builder subBuilder = global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.CreateBuilder();
                                    if (result.hasSenderKey)
                                    {
                                        subBuilder.MergeFrom(SenderKey);
                                    }
                                    input.ReadMessage(subBuilder, extensionRegistry);
                                    SenderKey = subBuilder.BuildPartial();
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasMessage
                {
                    get
                    {
                        return result.hasMessage;
                    }
                }
                public pb::ByteString Message
                {
                    get
                    {
                        return result.Message;
                    }
                    set
                    {
                        SetMessage(value);
                    }
                }
                public Builder SetMessage(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasMessage = true;
                    result.message_ = value;
                    return this;
                }
                public Builder ClearMessage()
                {
                    PrepareBuilder();
                    result.hasMessage = false;
                    result.message_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasSenderKey
                {
                    get
                    {
                        return result.hasSenderKey;
                    }
                }
                public global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage SenderKey
                {
                    get
                    {
                        return result.SenderKey;
                    }
                    set
                    {
                        SetSenderKey(value);
                    }
                }
                public Builder SetSenderKey(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasSenderKey = true;
                    result.senderKey_ = value;
                    return this;
                }
                public Builder SetSenderKey(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.Builder builderForValue)
                {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.hasSenderKey = true;
                    result.senderKey_ = builderForValue.Build();
                    return this;
                }
                public Builder MergeSenderKey(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    if (result.hasSenderKey &&
                        result.senderKey_ != global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.DefaultInstance)
                    {
                        result.senderKey_ = global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.SenderKeyGroupMessage.CreateBuilder(result.senderKey_).MergeFrom(value).BuildPartial();
                    }
                    else
                    {
                        result.senderKey_ = value;
                    }
                    result.hasSenderKey = true;
                    return this;
                }
                public Builder ClearSenderKey()
                {
                    PrepareBuilder();
                    result.hasSenderKey = false;
                    result.senderKey_ = null;
                    return this;
                }
            }
            static SenderKeyGroupData()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class MediaUrl : pb::GeneratedMessage<MediaUrl, MediaUrl.Builder>
        {
            private MediaUrl()
            {
            }
            private static readonly MediaUrl defaultInstance = new MediaUrl().MakeReadOnly();
            private static readonly string[] _mediaUrlFieldNames = new string[] { "description", "message", "title", "unknown1", "unknown2", "url" };
            private static readonly uint[] _mediaUrlFieldTags = new uint[] { 42, 10, 50, 24, 34, 18 };
            public static MediaUrl DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override MediaUrl DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override MediaUrl ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_MediaUrl__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<MediaUrl, MediaUrl.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_MediaUrl__FieldAccessorTable;
                }
            }

            public const int MessageFieldNumber = 1;
            private bool hasMessage;
            private pb::ByteString message_ = pb::ByteString.Empty;
            public bool HasMessage
            {
                get
                {
                    return hasMessage;
                }
            }
            public pb::ByteString Message
            {
                get
                {
                    return message_;
                }
            }

            public const int UrlFieldNumber = 2;
            private bool hasUrl;
            private pb::ByteString url_ = pb::ByteString.Empty;
            public bool HasUrl
            {
                get
                {
                    return hasUrl;
                }
            }
            public pb::ByteString Url
            {
                get
                {
                    return url_;
                }
            }

            public const int Unknown1FieldNumber = 3;
            private bool hasUnknown1;
            private uint unknown1_;
            public bool HasUnknown1
            {
                get
                {
                    return hasUnknown1;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Unknown1
            {
                get
                {
                    return unknown1_;
                }
            }

            public const int Unknown2FieldNumber = 4;
            private bool hasUnknown2;
            private pb::ByteString unknown2_ = pb::ByteString.Empty;
            public bool HasUnknown2
            {
                get
                {
                    return hasUnknown2;
                }
            }
            public pb::ByteString Unknown2
            {
                get
                {
                    return unknown2_;
                }
            }

            public const int DescriptionFieldNumber = 5;
            private bool hasDescription;
            private pb::ByteString description_ = pb::ByteString.Empty;
            public bool HasDescription
            {
                get
                {
                    return hasDescription;
                }
            }
            public pb::ByteString Description
            {
                get
                {
                    return description_;
                }
            }

            public const int TitleFieldNumber = 6;
            private bool hasTitle;
            private pb::ByteString title_ = pb::ByteString.Empty;
            public bool HasTitle
            {
                get
                {
                    return hasTitle;
                }
            }
            public pb::ByteString Title
            {
                get
                {
                    return title_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _mediaUrlFieldNames;
                if (hasMessage)
                {
                    output.WriteBytes(1, field_names[1], Message);
                }
                if (hasUrl)
                {
                    output.WriteBytes(2, field_names[5], Url);
                }
                if (hasUnknown1)
                {
                    output.WriteUInt32(3, field_names[3], Unknown1);
                }
                if (hasUnknown2)
                {
                    output.WriteBytes(4, field_names[4], Unknown2);
                }
                if (hasDescription)
                {
                    output.WriteBytes(5, field_names[0], Description);
                }
                if (hasTitle)
                {
                    output.WriteBytes(6, field_names[2], Title);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasMessage)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Message);
                }
                if (hasUrl)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Url);
                }
                if (hasUnknown1)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, Unknown1);
                }
                if (hasUnknown2)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, Unknown2);
                }
                if (hasDescription)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(5, Description);
                }
                if (hasTitle)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(6, Title);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static MediaUrl ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static MediaUrl ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static MediaUrl ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static MediaUrl ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static MediaUrl ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static MediaUrl ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static MediaUrl ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static MediaUrl ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static MediaUrl ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static MediaUrl ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private MediaUrl MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(MediaUrl prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<MediaUrl, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(MediaUrl cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private MediaUrl result;

                private MediaUrl PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        MediaUrl original = result;
                        result = new MediaUrl();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override MediaUrl MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.MediaUrl.Descriptor;
                    }
                }

                public override MediaUrl DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.MediaUrl.DefaultInstance;
                    }
                }

                public override MediaUrl BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is MediaUrl)
                    {
                        return MergeFrom((MediaUrl)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(MediaUrl other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.MediaUrl.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasMessage)
                    {
                        Message = other.Message;
                    }
                    if (other.HasUrl)
                    {
                        Url = other.Url;
                    }
                    if (other.HasUnknown1)
                    {
                        Unknown1 = other.Unknown1;
                    }
                    if (other.HasUnknown2)
                    {
                        Unknown2 = other.Unknown2;
                    }
                    if (other.HasDescription)
                    {
                        Description = other.Description;
                    }
                    if (other.HasTitle)
                    {
                        Title = other.Title;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_mediaUrlFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _mediaUrlFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 10:
                                {
                                    result.hasMessage = input.ReadBytes(ref result.message_);
                                    break;
                                }
                            case 18:
                                {
                                    result.hasUrl = input.ReadBytes(ref result.url_);
                                    break;
                                }
                            case 24:
                                {
                                    result.hasUnknown1 = input.ReadUInt32(ref result.unknown1_);
                                    break;
                                }
                            case 34:
                                {
                                    result.hasUnknown2 = input.ReadBytes(ref result.unknown2_);
                                    break;
                                }
                            case 42:
                                {
                                    result.hasDescription = input.ReadBytes(ref result.description_);
                                    break;
                                }
                            case 50:
                                {
                                    result.hasTitle = input.ReadBytes(ref result.title_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasMessage
                {
                    get
                    {
                        return result.hasMessage;
                    }
                }
                public pb::ByteString Message
                {
                    get
                    {
                        return result.Message;
                    }
                    set
                    {
                        SetMessage(value);
                    }
                }
                public Builder SetMessage(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasMessage = true;
                    result.message_ = value;
                    return this;
                }
                public Builder ClearMessage()
                {
                    PrepareBuilder();
                    result.hasMessage = false;
                    result.message_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasUrl
                {
                    get
                    {
                        return result.hasUrl;
                    }
                }
                public pb::ByteString Url
                {
                    get
                    {
                        return result.Url;
                    }
                    set
                    {
                        SetUrl(value);
                    }
                }
                public Builder SetUrl(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasUrl = true;
                    result.url_ = value;
                    return this;
                }
                public Builder ClearUrl()
                {
                    PrepareBuilder();
                    result.hasUrl = false;
                    result.url_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasUnknown1
                {
                    get
                    {
                        return result.hasUnknown1;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Unknown1
                {
                    get
                    {
                        return result.Unknown1;
                    }
                    set
                    {
                        SetUnknown1(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetUnknown1(uint value)
                {
                    PrepareBuilder();
                    result.hasUnknown1 = true;
                    result.unknown1_ = value;
                    return this;
                }
                public Builder ClearUnknown1()
                {
                    PrepareBuilder();
                    result.hasUnknown1 = false;
                    result.unknown1_ = 0;
                    return this;
                }

                public bool HasUnknown2
                {
                    get
                    {
                        return result.hasUnknown2;
                    }
                }
                public pb::ByteString Unknown2
                {
                    get
                    {
                        return result.Unknown2;
                    }
                    set
                    {
                        SetUnknown2(value);
                    }
                }
                public Builder SetUnknown2(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasUnknown2 = true;
                    result.unknown2_ = value;
                    return this;
                }
                public Builder ClearUnknown2()
                {
                    PrepareBuilder();
                    result.hasUnknown2 = false;
                    result.unknown2_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasDescription
                {
                    get
                    {
                        return result.hasDescription;
                    }
                }
                public pb::ByteString Description
                {
                    get
                    {
                        return result.Description;
                    }
                    set
                    {
                        SetDescription(value);
                    }
                }
                public Builder SetDescription(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasDescription = true;
                    result.description_ = value;
                    return this;
                }
                public Builder ClearDescription()
                {
                    PrepareBuilder();
                    result.hasDescription = false;
                    result.description_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasTitle
                {
                    get
                    {
                        return result.hasTitle;
                    }
                }
                public pb::ByteString Title
                {
                    get
                    {
                        return result.Title;
                    }
                    set
                    {
                        SetTitle(value);
                    }
                }
                public Builder SetTitle(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasTitle = true;
                    result.title_ = value;
                    return this;
                }
                public Builder ClearTitle()
                {
                    PrepareBuilder();
                    result.hasTitle = false;
                    result.title_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static MediaUrl()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class ImageMessage : pb::GeneratedMessage<ImageMessage, ImageMessage.Builder>
        {
            private ImageMessage()
            {
            }
            private static readonly ImageMessage defaultInstance = new ImageMessage().MakeReadOnly();
            private static readonly string[] _imageMessageFieldNames = new string[] { "caption", "height", "iv", "key", "length", "mimetype", "refkey", "sha256", "thumbnail", "url", "width" };
            private static readonly uint[] _imageMessageFieldTags = new uint[] { 26, 48, 82, 74, 40, 18, 66, 34, 90, 10, 56 };
            public static ImageMessage DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override ImageMessage DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override ImageMessage ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_ImageMessage__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<ImageMessage, ImageMessage.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_ImageMessage__FieldAccessorTable;
                }
            }

            public const int UrlFieldNumber = 1;
            private bool hasUrl;
            private pb::ByteString url_ = pb::ByteString.Empty;
            public bool HasUrl
            {
                get
                {
                    return hasUrl;
                }
            }
            public pb::ByteString Url
            {
                get
                {
                    return url_;
                }
            }

            public const int MimetypeFieldNumber = 2;
            private bool hasMimetype;
            private pb::ByteString mimetype_ = pb::ByteString.Empty;
            public bool HasMimetype
            {
                get
                {
                    return hasMimetype;
                }
            }
            public pb::ByteString Mimetype
            {
                get
                {
                    return mimetype_;
                }
            }

            public const int CaptionFieldNumber = 3;
            private bool hasCaption;
            private pb::ByteString caption_ = pb::ByteString.Empty;
            public bool HasCaption
            {
                get
                {
                    return hasCaption;
                }
            }
            public pb::ByteString Caption
            {
                get
                {
                    return caption_;
                }
            }

            public const int Sha256FieldNumber = 4;
            private bool hasSha256;
            private pb::ByteString sha256_ = pb::ByteString.Empty;
            public bool HasSha256
            {
                get
                {
                    return hasSha256;
                }
            }
            public pb::ByteString Sha256
            {
                get
                {
                    return sha256_;
                }
            }

            public const int LengthFieldNumber = 5;
            private bool hasLength;
            private uint length_;
            public bool HasLength
            {
                get
                {
                    return hasLength;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Length
            {
                get
                {
                    return length_;
                }
            }

            public const int HeightFieldNumber = 6;
            private bool hasHeight;
            private uint height_;
            public bool HasHeight
            {
                get
                {
                    return hasHeight;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Height
            {
                get
                {
                    return height_;
                }
            }

            public const int WidthFieldNumber = 7;
            private bool hasWidth;
            private uint width_;
            public bool HasWidth
            {
                get
                {
                    return hasWidth;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Width
            {
                get
                {
                    return width_;
                }
            }

            public const int RefkeyFieldNumber = 8;
            private bool hasRefkey;
            private pb::ByteString refkey_ = pb::ByteString.Empty;
            public bool HasRefkey
            {
                get
                {
                    return hasRefkey;
                }
            }
            public pb::ByteString Refkey
            {
                get
                {
                    return refkey_;
                }
            }

            public const int KeyFieldNumber = 9;
            private bool hasKey;
            private pb::ByteString key_ = pb::ByteString.Empty;
            public bool HasKey
            {
                get
                {
                    return hasKey;
                }
            }
            public pb::ByteString Key
            {
                get
                {
                    return key_;
                }
            }

            public const int IvFieldNumber = 10;
            private bool hasIv;
            private pb::ByteString iv_ = pb::ByteString.Empty;
            public bool HasIv
            {
                get
                {
                    return hasIv;
                }
            }
            public pb::ByteString Iv
            {
                get
                {
                    return iv_;
                }
            }

            public const int ThumbnailFieldNumber = 11;
            private bool hasThumbnail;
            private pb::ByteString thumbnail_ = pb::ByteString.Empty;
            public bool HasThumbnail
            {
                get
                {
                    return hasThumbnail;
                }
            }
            public pb::ByteString Thumbnail
            {
                get
                {
                    return thumbnail_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _imageMessageFieldNames;
                if (hasUrl)
                {
                    output.WriteBytes(1, field_names[9], Url);
                }
                if (hasMimetype)
                {
                    output.WriteBytes(2, field_names[5], Mimetype);
                }
                if (hasCaption)
                {
                    output.WriteBytes(3, field_names[0], Caption);
                }
                if (hasSha256)
                {
                    output.WriteBytes(4, field_names[7], Sha256);
                }
                if (hasLength)
                {
                    output.WriteUInt32(5, field_names[4], Length);
                }
                if (hasHeight)
                {
                    output.WriteUInt32(6, field_names[1], Height);
                }
                if (hasWidth)
                {
                    output.WriteUInt32(7, field_names[10], Width);
                }
                if (hasRefkey)
                {
                    output.WriteBytes(8, field_names[6], Refkey);
                }
                if (hasKey)
                {
                    output.WriteBytes(9, field_names[3], Key);
                }
                if (hasIv)
                {
                    output.WriteBytes(10, field_names[2], Iv);
                }
                if (hasThumbnail)
                {
                    output.WriteBytes(11, field_names[8], Thumbnail);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasUrl)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Url);
                }
                if (hasMimetype)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Mimetype);
                }
                if (hasCaption)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, Caption);
                }
                if (hasSha256)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, Sha256);
                }
                if (hasLength)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, Length);
                }
                if (hasHeight)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, Height);
                }
                if (hasWidth)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(7, Width);
                }
                if (hasRefkey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(8, Refkey);
                }
                if (hasKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(9, Key);
                }
                if (hasIv)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(10, Iv);
                }
                if (hasThumbnail)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(11, Thumbnail);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static ImageMessage ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static ImageMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static ImageMessage ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static ImageMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static ImageMessage ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static ImageMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static ImageMessage ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static ImageMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static ImageMessage ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static ImageMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private ImageMessage MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(ImageMessage prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<ImageMessage, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(ImageMessage cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private ImageMessage result;

                private ImageMessage PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        ImageMessage original = result;
                        result = new ImageMessage();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override ImageMessage MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.ImageMessage.Descriptor;
                    }
                }

                public override ImageMessage DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.ImageMessage.DefaultInstance;
                    }
                }

                public override ImageMessage BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is ImageMessage)
                    {
                        return MergeFrom((ImageMessage)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(ImageMessage other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.ImageMessage.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasUrl)
                    {
                        Url = other.Url;
                    }
                    if (other.HasMimetype)
                    {
                        Mimetype = other.Mimetype;
                    }
                    if (other.HasCaption)
                    {
                        Caption = other.Caption;
                    }
                    if (other.HasSha256)
                    {
                        Sha256 = other.Sha256;
                    }
                    if (other.HasLength)
                    {
                        Length = other.Length;
                    }
                    if (other.HasHeight)
                    {
                        Height = other.Height;
                    }
                    if (other.HasWidth)
                    {
                        Width = other.Width;
                    }
                    if (other.HasRefkey)
                    {
                        Refkey = other.Refkey;
                    }
                    if (other.HasKey)
                    {
                        Key = other.Key;
                    }
                    if (other.HasIv)
                    {
                        Iv = other.Iv;
                    }
                    if (other.HasThumbnail)
                    {
                        Thumbnail = other.Thumbnail;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_imageMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _imageMessageFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 10:
                                {
                                    result.hasUrl = input.ReadBytes(ref result.url_);
                                    break;
                                }
                            case 18:
                                {
                                    result.hasMimetype = input.ReadBytes(ref result.mimetype_);
                                    break;
                                }
                            case 26:
                                {
                                    result.hasCaption = input.ReadBytes(ref result.caption_);
                                    break;
                                }
                            case 34:
                                {
                                    result.hasSha256 = input.ReadBytes(ref result.sha256_);
                                    break;
                                }
                            case 40:
                                {
                                    result.hasLength = input.ReadUInt32(ref result.length_);
                                    break;
                                }
                            case 48:
                                {
                                    result.hasHeight = input.ReadUInt32(ref result.height_);
                                    break;
                                }
                            case 56:
                                {
                                    result.hasWidth = input.ReadUInt32(ref result.width_);
                                    break;
                                }
                            case 66:
                                {
                                    result.hasRefkey = input.ReadBytes(ref result.refkey_);
                                    break;
                                }
                            case 74:
                                {
                                    result.hasKey = input.ReadBytes(ref result.key_);
                                    break;
                                }
                            case 82:
                                {
                                    result.hasIv = input.ReadBytes(ref result.iv_);
                                    break;
                                }
                            case 90:
                                {
                                    result.hasThumbnail = input.ReadBytes(ref result.thumbnail_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasUrl
                {
                    get
                    {
                        return result.hasUrl;
                    }
                }
                public pb::ByteString Url
                {
                    get
                    {
                        return result.Url;
                    }
                    set
                    {
                        SetUrl(value);
                    }
                }
                public Builder SetUrl(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasUrl = true;
                    result.url_ = value;
                    return this;
                }
                public Builder ClearUrl()
                {
                    PrepareBuilder();
                    result.hasUrl = false;
                    result.url_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasMimetype
                {
                    get
                    {
                        return result.hasMimetype;
                    }
                }
                public pb::ByteString Mimetype
                {
                    get
                    {
                        return result.Mimetype;
                    }
                    set
                    {
                        SetMimetype(value);
                    }
                }
                public Builder SetMimetype(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasMimetype = true;
                    result.mimetype_ = value;
                    return this;
                }
                public Builder ClearMimetype()
                {
                    PrepareBuilder();
                    result.hasMimetype = false;
                    result.mimetype_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasCaption
                {
                    get
                    {
                        return result.hasCaption;
                    }
                }
                public pb::ByteString Caption
                {
                    get
                    {
                        return result.Caption;
                    }
                    set
                    {
                        SetCaption(value);
                    }
                }
                public Builder SetCaption(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasCaption = true;
                    result.caption_ = value;
                    return this;
                }
                public Builder ClearCaption()
                {
                    PrepareBuilder();
                    result.hasCaption = false;
                    result.caption_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasSha256
                {
                    get
                    {
                        return result.hasSha256;
                    }
                }
                public pb::ByteString Sha256
                {
                    get
                    {
                        return result.Sha256;
                    }
                    set
                    {
                        SetSha256(value);
                    }
                }
                public Builder SetSha256(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasSha256 = true;
                    result.sha256_ = value;
                    return this;
                }
                public Builder ClearSha256()
                {
                    PrepareBuilder();
                    result.hasSha256 = false;
                    result.sha256_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasLength
                {
                    get
                    {
                        return result.hasLength;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Length
                {
                    get
                    {
                        return result.Length;
                    }
                    set
                    {
                        SetLength(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetLength(uint value)
                {
                    PrepareBuilder();
                    result.hasLength = true;
                    result.length_ = value;
                    return this;
                }
                public Builder ClearLength()
                {
                    PrepareBuilder();
                    result.hasLength = false;
                    result.length_ = 0;
                    return this;
                }

                public bool HasHeight
                {
                    get
                    {
                        return result.hasHeight;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Height
                {
                    get
                    {
                        return result.Height;
                    }
                    set
                    {
                        SetHeight(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetHeight(uint value)
                {
                    PrepareBuilder();
                    result.hasHeight = true;
                    result.height_ = value;
                    return this;
                }
                public Builder ClearHeight()
                {
                    PrepareBuilder();
                    result.hasHeight = false;
                    result.height_ = 0;
                    return this;
                }

                public bool HasWidth
                {
                    get
                    {
                        return result.hasWidth;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Width
                {
                    get
                    {
                        return result.Width;
                    }
                    set
                    {
                        SetWidth(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetWidth(uint value)
                {
                    PrepareBuilder();
                    result.hasWidth = true;
                    result.width_ = value;
                    return this;
                }
                public Builder ClearWidth()
                {
                    PrepareBuilder();
                    result.hasWidth = false;
                    result.width_ = 0;
                    return this;
                }

                public bool HasRefkey
                {
                    get
                    {
                        return result.hasRefkey;
                    }
                }
                public pb::ByteString Refkey
                {
                    get
                    {
                        return result.Refkey;
                    }
                    set
                    {
                        SetRefkey(value);
                    }
                }
                public Builder SetRefkey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasRefkey = true;
                    result.refkey_ = value;
                    return this;
                }
                public Builder ClearRefkey()
                {
                    PrepareBuilder();
                    result.hasRefkey = false;
                    result.refkey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasKey
                {
                    get
                    {
                        return result.hasKey;
                    }
                }
                public pb::ByteString Key
                {
                    get
                    {
                        return result.Key;
                    }
                    set
                    {
                        SetKey(value);
                    }
                }
                public Builder SetKey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasKey = true;
                    result.key_ = value;
                    return this;
                }
                public Builder ClearKey()
                {
                    PrepareBuilder();
                    result.hasKey = false;
                    result.key_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasIv
                {
                    get
                    {
                        return result.hasIv;
                    }
                }
                public pb::ByteString Iv
                {
                    get
                    {
                        return result.Iv;
                    }
                    set
                    {
                        SetIv(value);
                    }
                }
                public Builder SetIv(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasIv = true;
                    result.iv_ = value;
                    return this;
                }
                public Builder ClearIv()
                {
                    PrepareBuilder();
                    result.hasIv = false;
                    result.iv_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasThumbnail
                {
                    get
                    {
                        return result.hasThumbnail;
                    }
                }
                public pb::ByteString Thumbnail
                {
                    get
                    {
                        return result.Thumbnail;
                    }
                    set
                    {
                        SetThumbnail(value);
                    }
                }
                public Builder SetThumbnail(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasThumbnail = true;
                    result.thumbnail_ = value;
                    return this;
                }
                public Builder ClearThumbnail()
                {
                    PrepareBuilder();
                    result.hasThumbnail = false;
                    result.thumbnail_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static ImageMessage()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Location : pb::GeneratedMessage<Location, Location.Builder>
        {
            private Location()
            {
            }
            private static readonly Location defaultInstance = new Location().MakeReadOnly();
            private static readonly string[] _locationFieldNames = new string[] { "Description", "Latitude", "Longitude", "Name", "Thumbnail", "Url" };
            private static readonly uint[] _locationFieldTags = new uint[] { 34, 9, 17, 26, 50, 42 };
            public static Location DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override Location DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override Location ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_Location__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<Location, Location.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_Location__FieldAccessorTable;
                }
            }

            public const int LatitudeFieldNumber = 1;
            private bool hasLatitude;
            private double latitude_;
            public bool HasLatitude
            {
                get
                {
                    return hasLatitude;
                }
            }
            public double Latitude
            {
                get
                {
                    return latitude_;
                }
            }

            public const int LongitudeFieldNumber = 2;
            private bool hasLongitude;
            private double longitude_;
            public bool HasLongitude
            {
                get
                {
                    return hasLongitude;
                }
            }
            public double Longitude
            {
                get
                {
                    return longitude_;
                }
            }

            public const int NameFieldNumber = 3;
            private bool hasName;
            private pb::ByteString name_ = pb::ByteString.Empty;
            public bool HasName
            {
                get
                {
                    return hasName;
                }
            }
            public pb::ByteString Name
            {
                get
                {
                    return name_;
                }
            }

            public const int DescriptionFieldNumber = 4;
            private bool hasDescription;
            private pb::ByteString description_ = pb::ByteString.Empty;
            public bool HasDescription
            {
                get
                {
                    return hasDescription;
                }
            }
            public pb::ByteString Description
            {
                get
                {
                    return description_;
                }
            }

            public const int UrlFieldNumber = 5;
            private bool hasUrl;
            private pb::ByteString url_ = pb::ByteString.Empty;
            public bool HasUrl
            {
                get
                {
                    return hasUrl;
                }
            }
            public pb::ByteString Url
            {
                get
                {
                    return url_;
                }
            }

            public const int ThumbnailFieldNumber = 6;
            private bool hasThumbnail;
            private pb::ByteString thumbnail_ = pb::ByteString.Empty;
            public bool HasThumbnail
            {
                get
                {
                    return hasThumbnail;
                }
            }
            public pb::ByteString Thumbnail
            {
                get
                {
                    return thumbnail_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _locationFieldNames;
                if (hasLatitude)
                {
                    output.WriteDouble(1, field_names[1], Latitude);
                }
                if (hasLongitude)
                {
                    output.WriteDouble(2, field_names[2], Longitude);
                }
                if (hasName)
                {
                    output.WriteBytes(3, field_names[3], Name);
                }
                if (hasDescription)
                {
                    output.WriteBytes(4, field_names[0], Description);
                }
                if (hasUrl)
                {
                    output.WriteBytes(5, field_names[5], Url);
                }
                if (hasThumbnail)
                {
                    output.WriteBytes(6, field_names[4], Thumbnail);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasLatitude)
                {
                    size += pb::CodedOutputStream.ComputeDoubleSize(1, Latitude);
                }
                if (hasLongitude)
                {
                    size += pb::CodedOutputStream.ComputeDoubleSize(2, Longitude);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, Name);
                }
                if (hasDescription)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, Description);
                }
                if (hasUrl)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(5, Url);
                }
                if (hasThumbnail)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(6, Thumbnail);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static Location ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Location ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Location ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Location ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Location ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Location ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Location ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Location ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Location ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Location ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Location MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(Location prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Location, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(Location cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private Location result;

                private Location PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        Location original = result;
                        result = new Location();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override Location MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Location.Descriptor;
                    }
                }

                public override Location DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Location.DefaultInstance;
                    }
                }

                public override Location BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is Location)
                    {
                        return MergeFrom((Location)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(Location other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Location.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasLatitude)
                    {
                        Latitude = other.Latitude;
                    }
                    if (other.HasLongitude)
                    {
                        Longitude = other.Longitude;
                    }
                    if (other.HasName)
                    {
                        Name = other.Name;
                    }
                    if (other.HasDescription)
                    {
                        Description = other.Description;
                    }
                    if (other.HasUrl)
                    {
                        Url = other.Url;
                    }
                    if (other.HasThumbnail)
                    {
                        Thumbnail = other.Thumbnail;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_locationFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _locationFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 9:
                                {
                                    result.hasLatitude = input.ReadDouble(ref result.latitude_);
                                    break;
                                }
                            case 17:
                                {
                                    result.hasLongitude = input.ReadDouble(ref result.longitude_);
                                    break;
                                }
                            case 26:
                                {
                                    result.hasName = input.ReadBytes(ref result.name_);
                                    break;
                                }
                            case 34:
                                {
                                    result.hasDescription = input.ReadBytes(ref result.description_);
                                    break;
                                }
                            case 42:
                                {
                                    result.hasUrl = input.ReadBytes(ref result.url_);
                                    break;
                                }
                            case 50:
                                {
                                    result.hasThumbnail = input.ReadBytes(ref result.thumbnail_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasLatitude
                {
                    get
                    {
                        return result.hasLatitude;
                    }
                }
                public double Latitude
                {
                    get
                    {
                        return result.Latitude;
                    }
                    set
                    {
                        SetLatitude(value);
                    }
                }
                public Builder SetLatitude(double value)
                {
                    PrepareBuilder();
                    result.hasLatitude = true;
                    result.latitude_ = value;
                    return this;
                }
                public Builder ClearLatitude()
                {
                    PrepareBuilder();
                    result.hasLatitude = false;
                    result.latitude_ = 0D;
                    return this;
                }

                public bool HasLongitude
                {
                    get
                    {
                        return result.hasLongitude;
                    }
                }
                public double Longitude
                {
                    get
                    {
                        return result.Longitude;
                    }
                    set
                    {
                        SetLongitude(value);
                    }
                }
                public Builder SetLongitude(double value)
                {
                    PrepareBuilder();
                    result.hasLongitude = true;
                    result.longitude_ = value;
                    return this;
                }
                public Builder ClearLongitude()
                {
                    PrepareBuilder();
                    result.hasLongitude = false;
                    result.longitude_ = 0D;
                    return this;
                }

                public bool HasName
                {
                    get
                    {
                        return result.hasName;
                    }
                }
                public pb::ByteString Name
                {
                    get
                    {
                        return result.Name;
                    }
                    set
                    {
                        SetName(value);
                    }
                }
                public Builder SetName(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasName = true;
                    result.name_ = value;
                    return this;
                }
                public Builder ClearName()
                {
                    PrepareBuilder();
                    result.hasName = false;
                    result.name_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasDescription
                {
                    get
                    {
                        return result.hasDescription;
                    }
                }
                public pb::ByteString Description
                {
                    get
                    {
                        return result.Description;
                    }
                    set
                    {
                        SetDescription(value);
                    }
                }
                public Builder SetDescription(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasDescription = true;
                    result.description_ = value;
                    return this;
                }
                public Builder ClearDescription()
                {
                    PrepareBuilder();
                    result.hasDescription = false;
                    result.description_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasUrl
                {
                    get
                    {
                        return result.hasUrl;
                    }
                }
                public pb::ByteString Url
                {
                    get
                    {
                        return result.Url;
                    }
                    set
                    {
                        SetUrl(value);
                    }
                }
                public Builder SetUrl(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasUrl = true;
                    result.url_ = value;
                    return this;
                }
                public Builder ClearUrl()
                {
                    PrepareBuilder();
                    result.hasUrl = false;
                    result.url_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasThumbnail
                {
                    get
                    {
                        return result.hasThumbnail;
                    }
                }
                public pb::ByteString Thumbnail
                {
                    get
                    {
                        return result.Thumbnail;
                    }
                    set
                    {
                        SetThumbnail(value);
                    }
                }
                public Builder SetThumbnail(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasThumbnail = true;
                    result.thumbnail_ = value;
                    return this;
                }
                public Builder ClearThumbnail()
                {
                    PrepareBuilder();
                    result.hasThumbnail = false;
                    result.thumbnail_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static Location()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class DocumentMessage : pb::GeneratedMessage<DocumentMessage, DocumentMessage.Builder>
        {
            private DocumentMessage()
            {
            }
            private static readonly DocumentMessage defaultInstance = new DocumentMessage().MakeReadOnly();
            private static readonly string[] _documentMessageFieldNames = new string[] { "filename", "length", "mimetype", "name", "refkey", "sha256", "thumbnail", "unknown", "url" };
            private static readonly uint[] _documentMessageFieldTags = new uint[] { 66, 32, 18, 26, 58, 42, 74, 48, 10 };
            public static DocumentMessage DefaultInstance
            {
                get
                {
                    return defaultInstance;
                }
            }

            public override DocumentMessage DefaultInstanceForType
            {
                get
                {
                    return DefaultInstance;
                }
            }

            protected override DocumentMessage ThisMessage
            {
                get
                {
                    return this;
                }
            }

            public static pbd::MessageDescriptor Descriptor
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_DocumentMessage__Descriptor;
                }
            }

            protected override pb::FieldAccess.FieldAccessorTable<DocumentMessage, DocumentMessage.Builder> InternalFieldAccessors
            {
                get
                {
                    return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.internal__static_DocumentMessage__FieldAccessorTable;
                }
            }

            public const int UrlFieldNumber = 1;
            private bool hasUrl;
            private pb::ByteString url_ = pb::ByteString.Empty;
            public bool HasUrl
            {
                get
                {
                    return hasUrl;
                }
            }
            public pb::ByteString Url
            {
                get
                {
                    return url_;
                }
            }

            public const int MimetypeFieldNumber = 2;
            private bool hasMimetype;
            private pb::ByteString mimetype_ = pb::ByteString.Empty;
            public bool HasMimetype
            {
                get
                {
                    return hasMimetype;
                }
            }
            public pb::ByteString Mimetype
            {
                get
                {
                    return mimetype_;
                }
            }

            public const int NameFieldNumber = 3;
            private bool hasName;
            private pb::ByteString name_ = pb::ByteString.Empty;
            public bool HasName
            {
                get
                {
                    return hasName;
                }
            }
            public pb::ByteString Name
            {
                get
                {
                    return name_;
                }
            }

            public const int LengthFieldNumber = 4;
            private bool hasLength;
            private uint length_;
            public bool HasLength
            {
                get
                {
                    return hasLength;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Length
            {
                get
                {
                    return length_;
                }
            }

            public const int Sha256FieldNumber = 5;
            private bool hasSha256;
            private pb::ByteString sha256_ = pb::ByteString.Empty;
            public bool HasSha256
            {
                get
                {
                    return hasSha256;
                }
            }
            public pb::ByteString Sha256
            {
                get
                {
                    return sha256_;
                }
            }

            public const int UnknownFieldNumber = 6;
            private bool hasUnknown;
            private uint unknown_;
            public bool HasUnknown
            {
                get
                {
                    return hasUnknown;
                }
            }
            [global::System.CLSCompliant(false)]
            public uint Unknown
            {
                get
                {
                    return unknown_;
                }
            }

            public const int RefkeyFieldNumber = 7;
            private bool hasRefkey;
            private pb::ByteString refkey_ = pb::ByteString.Empty;
            public bool HasRefkey
            {
                get
                {
                    return hasRefkey;
                }
            }
            public pb::ByteString Refkey
            {
                get
                {
                    return refkey_;
                }
            }

            public const int FilenameFieldNumber = 8;
            private bool hasFilename;
            private pb::ByteString filename_ = pb::ByteString.Empty;
            public bool HasFilename
            {
                get
                {
                    return hasFilename;
                }
            }
            public pb::ByteString Filename
            {
                get
                {
                    return filename_;
                }
            }

            public const int ThumbnailFieldNumber = 9;
            private bool hasThumbnail;
            private pb::ByteString thumbnail_ = pb::ByteString.Empty;
            public bool HasThumbnail
            {
                get
                {
                    return hasThumbnail;
                }
            }
            public pb::ByteString Thumbnail
            {
                get
                {
                    return thumbnail_;
                }
            }

            public override bool IsInitialized
            {
                get
                {
                    return true;
                }
            }

            public override void WriteTo(pb::ICodedOutputStream output)
            {
                CalcSerializedSize();
                string[] field_names = _documentMessageFieldNames;
                if (hasUrl)
                {
                    output.WriteBytes(1, field_names[8], Url);
                }
                if (hasMimetype)
                {
                    output.WriteBytes(2, field_names[2], Mimetype);
                }
                if (hasName)
                {
                    output.WriteBytes(3, field_names[3], Name);
                }
                if (hasLength)
                {
                    output.WriteUInt32(4, field_names[1], Length);
                }
                if (hasSha256)
                {
                    output.WriteBytes(5, field_names[5], Sha256);
                }
                if (hasUnknown)
                {
                    output.WriteUInt32(6, field_names[7], Unknown);
                }
                if (hasRefkey)
                {
                    output.WriteBytes(7, field_names[4], Refkey);
                }
                if (hasFilename)
                {
                    output.WriteBytes(8, field_names[0], Filename);
                }
                if (hasThumbnail)
                {
                    output.WriteBytes(9, field_names[6], Thumbnail);
                }
                UnknownFields.WriteTo(output);
            }

            private int memoizedSerializedSize = -1;
            public override int SerializedSize
            {
                get
                {
                    int size = memoizedSerializedSize;
                    if (size != -1)
                        return size;
                    return CalcSerializedSize();
                }
            }

            private int CalcSerializedSize()
            {
                int size = memoizedSerializedSize;
                if (size != -1)
                    return size;

                size = 0;
                if (hasUrl)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Url);
                }
                if (hasMimetype)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Mimetype);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, Name);
                }
                if (hasLength)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, Length);
                }
                if (hasSha256)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(5, Sha256);
                }
                if (hasUnknown)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, Unknown);
                }
                if (hasRefkey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(7, Refkey);
                }
                if (hasFilename)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(8, Filename);
                }
                if (hasThumbnail)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(9, Thumbnail);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
            public static DocumentMessage ParseFrom(pb::ByteString data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static DocumentMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static DocumentMessage ParseFrom(byte[] data)
            {
                return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static DocumentMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static DocumentMessage ParseFrom(global::System.IO.Stream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static DocumentMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static DocumentMessage ParseDelimitedFrom(global::System.IO.Stream input)
            {
                return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static DocumentMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
            {
                return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static DocumentMessage ParseFrom(pb::ICodedInputStream input)
            {
                return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static DocumentMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private DocumentMessage MakeReadOnly()
            {
                return this;
            }

            public static Builder CreateBuilder()
            {
                return new Builder();
            }
            public override Builder ToBuilder()
            {
                return CreateBuilder(this);
            }
            public override Builder CreateBuilderForType()
            {
                return new Builder();
            }
            public static Builder CreateBuilder(DocumentMessage prototype)
            {
                return new Builder(prototype);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<DocumentMessage, Builder>
            {
                protected override Builder ThisBuilder
                {
                    get
                    {
                        return this;
                    }
                }
                public Builder()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                }
                internal Builder(DocumentMessage cloneFrom)
                {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                }

                private bool resultIsReadOnly;
                private DocumentMessage result;

                private DocumentMessage PrepareBuilder()
                {
                    if (resultIsReadOnly)
                    {
                        DocumentMessage original = result;
                        result = new DocumentMessage();
                        resultIsReadOnly = false;
                        MergeFrom(original);
                    }
                    return result;
                }

                public override bool IsInitialized
                {
                    get
                    {
                        return result.IsInitialized;
                    }
                }

                protected override DocumentMessage MessageBeingBuilt
                {
                    get
                    {
                        return PrepareBuilder();
                    }
                }

                public override Builder Clear()
                {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                }

                public override Builder Clone()
                {
                    if (resultIsReadOnly)
                    {
                        return new Builder(result);
                    }
                    else
                    {
                        return new Builder().MergeFrom(result);
                    }
                }

                public override pbd::MessageDescriptor DescriptorForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.DocumentMessage.Descriptor;
                    }
                }

                public override DocumentMessage DefaultInstanceForType
                {
                    get
                    {
                        return global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.DocumentMessage.DefaultInstance;
                    }
                }

                public override DocumentMessage BuildPartial()
                {
                    if (resultIsReadOnly)
                    {
                        return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                }

                public override Builder MergeFrom(pb::IMessage other)
                {
                    if (other is DocumentMessage)
                    {
                        return MergeFrom((DocumentMessage)other);
                    }
                    else
                    {
                        base.MergeFrom(other);
                        return this;
                    }
                }

                public override Builder MergeFrom(DocumentMessage other)
                {
                    if (other == global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.DocumentMessage.DefaultInstance)
                        return this;
                    PrepareBuilder();
                    if (other.HasUrl)
                    {
                        Url = other.Url;
                    }
                    if (other.HasMimetype)
                    {
                        Mimetype = other.Mimetype;
                    }
                    if (other.HasName)
                    {
                        Name = other.Name;
                    }
                    if (other.HasLength)
                    {
                        Length = other.Length;
                    }
                    if (other.HasSha256)
                    {
                        Sha256 = other.Sha256;
                    }
                    if (other.HasUnknown)
                    {
                        Unknown = other.Unknown;
                    }
                    if (other.HasRefkey)
                    {
                        Refkey = other.Refkey;
                    }
                    if (other.HasFilename)
                    {
                        Filename = other.Filename;
                    }
                    if (other.HasThumbnail)
                    {
                        Thumbnail = other.Thumbnail;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                }

                public override Builder MergeFrom(pb::ICodedInputStream input)
                {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                }

                public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
                {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name))
                    {
                        if (tag == 0 && field_name != null)
                        {
                            int field_ordinal = global::System.Array.BinarySearch(_documentMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                            if (field_ordinal >= 0)
                                tag = _documentMessageFieldTags[field_ordinal];
                            else
                            {
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                continue;
                            }
                        }
                        switch (tag)
                        {
                            case 0:
                                {
                                    throw pb::InvalidProtocolBufferException.InvalidTag();
                                }
                            default:
                                {
                                    if (pb::WireFormat.IsEndGroupTag(tag))
                                    {
                                        if (unknownFields != null)
                                        {
                                            this.UnknownFields = unknownFields.Build();
                                        }
                                        return this;
                                    }
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                    break;
                                }
                            case 10:
                                {
                                    result.hasUrl = input.ReadBytes(ref result.url_);
                                    break;
                                }
                            case 18:
                                {
                                    result.hasMimetype = input.ReadBytes(ref result.mimetype_);
                                    break;
                                }
                            case 26:
                                {
                                    result.hasName = input.ReadBytes(ref result.name_);
                                    break;
                                }
                            case 32:
                                {
                                    result.hasLength = input.ReadUInt32(ref result.length_);
                                    break;
                                }
                            case 42:
                                {
                                    result.hasSha256 = input.ReadBytes(ref result.sha256_);
                                    break;
                                }
                            case 48:
                                {
                                    result.hasUnknown = input.ReadUInt32(ref result.unknown_);
                                    break;
                                }
                            case 58:
                                {
                                    result.hasRefkey = input.ReadBytes(ref result.refkey_);
                                    break;
                                }
                            case 66:
                                {
                                    result.hasFilename = input.ReadBytes(ref result.filename_);
                                    break;
                                }
                            case 74:
                                {
                                    result.hasThumbnail = input.ReadBytes(ref result.thumbnail_);
                                    break;
                                }
                        }
                    }

                    if (unknownFields != null)
                    {
                        this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                }


                public bool HasUrl
                {
                    get
                    {
                        return result.hasUrl;
                    }
                }
                public pb::ByteString Url
                {
                    get
                    {
                        return result.Url;
                    }
                    set
                    {
                        SetUrl(value);
                    }
                }
                public Builder SetUrl(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasUrl = true;
                    result.url_ = value;
                    return this;
                }
                public Builder ClearUrl()
                {
                    PrepareBuilder();
                    result.hasUrl = false;
                    result.url_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasMimetype
                {
                    get
                    {
                        return result.hasMimetype;
                    }
                }
                public pb::ByteString Mimetype
                {
                    get
                    {
                        return result.Mimetype;
                    }
                    set
                    {
                        SetMimetype(value);
                    }
                }
                public Builder SetMimetype(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasMimetype = true;
                    result.mimetype_ = value;
                    return this;
                }
                public Builder ClearMimetype()
                {
                    PrepareBuilder();
                    result.hasMimetype = false;
                    result.mimetype_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasName
                {
                    get
                    {
                        return result.hasName;
                    }
                }
                public pb::ByteString Name
                {
                    get
                    {
                        return result.Name;
                    }
                    set
                    {
                        SetName(value);
                    }
                }
                public Builder SetName(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasName = true;
                    result.name_ = value;
                    return this;
                }
                public Builder ClearName()
                {
                    PrepareBuilder();
                    result.hasName = false;
                    result.name_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasLength
                {
                    get
                    {
                        return result.hasLength;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Length
                {
                    get
                    {
                        return result.Length;
                    }
                    set
                    {
                        SetLength(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetLength(uint value)
                {
                    PrepareBuilder();
                    result.hasLength = true;
                    result.length_ = value;
                    return this;
                }
                public Builder ClearLength()
                {
                    PrepareBuilder();
                    result.hasLength = false;
                    result.length_ = 0;
                    return this;
                }

                public bool HasSha256
                {
                    get
                    {
                        return result.hasSha256;
                    }
                }
                public pb::ByteString Sha256
                {
                    get
                    {
                        return result.Sha256;
                    }
                    set
                    {
                        SetSha256(value);
                    }
                }
                public Builder SetSha256(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasSha256 = true;
                    result.sha256_ = value;
                    return this;
                }
                public Builder ClearSha256()
                {
                    PrepareBuilder();
                    result.hasSha256 = false;
                    result.sha256_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasUnknown
                {
                    get
                    {
                        return result.hasUnknown;
                    }
                }
                [global::System.CLSCompliant(false)]
                public uint Unknown
                {
                    get
                    {
                        return result.Unknown;
                    }
                    set
                    {
                        SetUnknown(value);
                    }
                }
                [global::System.CLSCompliant(false)]
                public Builder SetUnknown(uint value)
                {
                    PrepareBuilder();
                    result.hasUnknown = true;
                    result.unknown_ = value;
                    return this;
                }
                public Builder ClearUnknown()
                {
                    PrepareBuilder();
                    result.hasUnknown = false;
                    result.unknown_ = 0;
                    return this;
                }

                public bool HasRefkey
                {
                    get
                    {
                        return result.hasRefkey;
                    }
                }
                public pb::ByteString Refkey
                {
                    get
                    {
                        return result.Refkey;
                    }
                    set
                    {
                        SetRefkey(value);
                    }
                }
                public Builder SetRefkey(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasRefkey = true;
                    result.refkey_ = value;
                    return this;
                }
                public Builder ClearRefkey()
                {
                    PrepareBuilder();
                    result.hasRefkey = false;
                    result.refkey_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasFilename
                {
                    get
                    {
                        return result.hasFilename;
                    }
                }
                public pb::ByteString Filename
                {
                    get
                    {
                        return result.Filename;
                    }
                    set
                    {
                        SetFilename(value);
                    }
                }
                public Builder SetFilename(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasFilename = true;
                    result.filename_ = value;
                    return this;
                }
                public Builder ClearFilename()
                {
                    PrepareBuilder();
                    result.hasFilename = false;
                    result.filename_ = pb::ByteString.Empty;
                    return this;
                }

                public bool HasThumbnail
                {
                    get
                    {
                        return result.hasThumbnail;
                    }
                }
                public pb::ByteString Thumbnail
                {
                    get
                    {
                        return result.Thumbnail;
                    }
                    set
                    {
                        SetThumbnail(value);
                    }
                }
                public Builder SetThumbnail(pb::ByteString value)
                {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasThumbnail = true;
                    result.thumbnail_ = value;
                    return this;
                }
                public Builder ClearThumbnail()
                {
                    PrepareBuilder();
                    result.hasThumbnail = false;
                    result.thumbnail_ = pb::ByteString.Empty;
                    return this;
                }
            }
            static DocumentMessage()
            {
                object.ReferenceEquals(global::Tr.Com.Eimza.LibAxolotl.Protocol.WhisperProtos.Descriptor, null);
            }
        }

        #endregion

    }
}

#endregion Designer generated code
